<relevant_code>



<file file_path=/app/src/main/java/com/example/ex04/MenuFragment.kt>

        Logger.i(message = "MenuFragment onViewCreated")

        binding.btnCircles.setOnClickListener {
            Logger.i(message = "Circles button tapped")
            findNavController().navigate(R.id.action_menuFragment_to_circlesFragment)
        }
        binding.btnPrime.setOnClickListener {
            Logger.i(message = "Prime Numbers button tapped")
            findNavController().navigate(R.id.action_menuFragment_to_primeNumbersFragment)
        }
        binding.btnThermometer.setOnClickListener {
            Logger.i(message = "Thermometer button tapped")
            findNavController().navigate(R.id.action_menuFragment_to_thermometerFragment)
        }
        binding.btnSpeechModule.setOnClickListener {
            Logger.i(message = "Speech Module button tapped")
            findNavController().navigate(R.id.action_menuFragment_to_speechModuleFragment)
        }
        binding.btnCalc.setOnClickListener {
            Logger.i(message = "Calc button tapped")
            findNavController().navigate(R.id.action_menuFragment_to_calcFragment)
        }
    }
}
</file>



<file file_path=/circles/src/main/java/com/example/circles/CirclesFragment.kt>

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        Logger.i(message = "CirclesFragment onViewCreated")
        setupLogging()
        binding.buttonCheckIntersection.setOnClickListener {
                try {
                    viewModel.x1.value = binding.editTextX1.text.toString()
                    viewModel.y1.value = binding.editTextY1.text.toString()
                    viewModel.r1.value = binding.editTextR1.text.toString()
                    viewModel.x2.value = binding.editTextX2.text.toString()
                    viewModel.y2.value = binding.editTextY2.text.toString()
                    viewModel.r2.value = binding.editTextR2.text.toString()
                    viewModel.checkCircles()
                } catch (e: NumberFormatException) {
                    Logger.e("Invalid input", e)
                }

        }

        viewModel.result.observe(viewLifecycleOwner, Observer { result ->
            binding.textViewResult.text = result
        })
    }


    private fun setupLogging() {
        Logger.i(message = "Setting up logging and binding for EditText fields")
        binding.editTextX1.addLogging("x1")
        binding.editTextY1.addLogging("y1")
        binding.editTextR1.addLogging("r1")
        binding.editTextX2.addLogging("x2")
        binding.editTextY2.addLogging("y2")
        binding.editTextR2.addLogging("r2")
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
</file>



<file file_path=/primenumbers/build.gradle.kts>

    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    buildFeatures {
        dataBinding = true
    }
}

dependencies {
    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.appcompat)
    implementation(libs.material)
    implementation(libs.androidx.activity)
    implementation(libs.androidx.constraintlayout)
    implementation(libs.androidx.navigation.fragment.ktx)
    implementation(libs.androidx.navigation.ui.ktx)
    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core)
    implementation(libs.androidx.lifecycle.viewmodel.ktx)
    implementation(libs.androidx.lifecycle.livedata.ktx)
    implementation(libs.androidx.lifecycle.runtime.ktx)
    implementation(project(":logger"))
}
</file>



<file file_path=/primenumbers/src/main/java/com/example/primenumbers/PrimeNumbersModel.kt>
package com.example.primenumbers

import com.example.logger.Logger
import kotlin.math.sqrt

class PrimeNumbersModel {

    private fun isPrime(numberToCheck: Int): Boolean {
        if (numberToCheck < 2) return false

        val maxSqrtNumber = sqrt(numberToCheck.toDouble()).toInt()
        for (i in 2..maxSqrtNumber) {
            if (numberToCheck % i == 0) return false
</file>



<file file_path=/calc/src/androidTest/java/com/course/calc/ExampleInstrumentedTest.kt>
package com.course.calc

import androidx.test.platform.app.InstrumentationRegistry
import androidx.test.ext.junit.runners.AndroidJUnit4

import org.junit.Test
import org.junit.runner.RunWith

import org.junit.Assert.*

/**
 * Instrumented test, which will execute on an Android device.
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
@RunWith(AndroidJUnit4::class)
class ExampleInstrumentedTest {
    @Test
    fun useAppContext() {
        // Context of the app under test.
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        assertEquals("com.course.calc.test", appContext.packageName)
    }
}
</file>



<file file_path=/circles/src/main/java/com/example/circles/CirclesViewModel.kt>

        viewModelScope.launch(Dispatchers.IO) {
            Logger.i(message = "$this started")

            val x1 = validateDoubleRad(x1.value)
            val y1 = validateDoubleRad(y1.value)
            val r1 = validateDoubleRad(r1.value, true)
            val x2 = validateDoubleRad(x2.value)
            val y2 = validateDoubleRad(y2.value)
            val r2 = validateDoubleRad(r2.value, true)

            if (x1 == null || y1 == null || r1 == null || x2 == null || y2 == null || r2 == null) {
                _result.postValue("Couldn't parse a number. Please, try again")
                Logger.e(message = "Invalid input detected")
                return@launch
            }
            _result.postValue(circlesModel.checkIntersection(x1, y1, r1, x2, y2, r2))
            Logger.i(message = "$this ended")
        }
    }

    private fun validateDoubleRad(input: String?, isRad:Boolean=false): Double? {
        val value = input?.toDoubleOrNull()
        if (value == null || (isRad && value <= 0)) {
            Logger.e(message = "Invalid value: $input")
            return null
        }
        return value
    }

}
</file>



<file file_path=/thermometer/src/main/java/com/example/thermometer/ThermometerViewModel.kt>

    private fun celsiusToKelvin(celsius: Double): Double {
        val kelvin = celsius + 273.15
        Logger.d(message = "Converted Celsius $celsius to Kelvin $kelvin")
        return kelvin
    }

    private fun celsiusToFahrenheit(celsius: Double): Double {
        val fahrenheit = (celsius * 9 / 5) + 32
        Logger.d(message = "Converted Celsius $celsius to Fahrenheit $fahrenheit")
        return fahrenheit
    }

    private fun getComfortRange(season: String): Pair<Double, Double> {
        val range = if (season == "w") {
            20.0 to 22.0
        } else {
            22.0 to 25.0
        }
        Logger.d(message = "Comfort range for season '$season': $range")
        return range
    }

    private fun formatTimestamp(timestamp: Long): String {
        val dateFormat = SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS", Locale.getDefault())
        dateFormat.timeZone = TimeZone.getTimeZone("Europe/Moscow")
        return dateFormat.format(timestamp)
    }

}

</file>



</relevant_code>
